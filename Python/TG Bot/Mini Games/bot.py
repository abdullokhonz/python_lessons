import telebot
from telebot import types
import random
import config
from texts import texts

bot: telebot = telebot.TeleBot(config.TOKEN)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data: dict = {}


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, texts['start'], parse_mode='html')


# –ú–µ–Ω—é –±–æ—Ç–∞
@bot.message_handler(commands=['menu'])
def bot_menu(message):
    markup_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup_menu.add('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
    markup_menu.add('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
    bot.send_message(message.chat.id, 'üìí <b><u>–ú–µ–Ω—é –±–æ—Ç–∞</u></b>üëá', reply_markup=markup_menu, parse_mode='html')


# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
def user_profile(message):
    bot.reply_to(
        message,
        texts['user_profile'].format(
            message.from_user.first_name,
            message.from_user.last_name,
            message.from_user.username,
            message.from_user.id,
            '__ ' * 16,
            ' ' * 8
        ),
        parse_mode='html'
    )


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
@bot.message_handler(func=lambda message: message.text == 'üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ')
def bot_information(message):
    bot.reply_to(
        message,
        texts['bot_information'],
        parse_mode='html'
    )


# –ü–æ–º–æ—â—å —Å –±–æ—Ç–æ–º
@bot.message_handler(commands=['help'])
def help_with_bot(message):
    bot.send_message(message.chat.id, texts['help'], parse_mode='html')


# –í—ã–±–æ—Ä –∏–≥—Ä
@bot.message_handler(commands=['games'])
def selection_of_games(message):
    markup_games = types.InlineKeyboardMarkup()
    markup_games.add(types.InlineKeyboardButton('ü™® –ö–∞–º–µ–Ω—å, ‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã, üßª –ë—É–º–∞–≥–∞.', callback_data='rps'))
    markup_games.add(types.InlineKeyboardButton('üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ!', callback_data='guess'))
    bot.send_message(message.chat.id, '‚≠ï –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å:', reply_markup=markup_games)


@bot.callback_query_handler(func=lambda callback: callback.data in ['rps', 'guess'])
def callback_games(callback):
    if callback.data == 'rps':
        rps_game(callback.message)
    elif callback.data == 'guess':
        guess_game(callback.message)


# –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞
@bot.message_handler(commands=['rps'])
def rps_game(message):
    chat_id = message.chat.id
    user_data[chat_id] = {'game': 'rps', 'people_s': 0, 'comp_s': 0}
    bot.send_message(chat_id, "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É\n\"ü™® –ö–∞–º–µ–Ω—å, ‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã, üßª –ë—É–º–∞–≥–∞.\"</b>"
                              "\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è üèÜ –ø–æ–±–µ–¥—ã:", parse_mode='html')


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('game') == 'rps')
def handle_rps_game(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id, {})
    if 'victory' not in data:
        try:
            victory = int(message.text)
            data['victory'] = victory
            data['rounds'] = 0
            data['people_s'] = 0
            data['comp_s'] = 0
            user_data[chat_id] = data
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("ü™® –ö–∞–º–µ–Ω—å", callback_data="ü™® –ö–∞–º–µ–Ω—å"))
            markup.add(types.InlineKeyboardButton("‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="Ô∏è‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã"))
            markup.add(types.InlineKeyboardButton("üßª –ë—É–º–∞–≥–∞", callback_data="üßª –ë—É–º–∞–≥–∞"))
            bot.send_message(chat_id, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚¨áÔ∏è", reply_markup=markup)
        except ValueError:
            bot.send_message(chat_id, "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ‚ùó")


@bot.callback_query_handler(func=lambda call: user_data.get(call.message.chat.id, {}).get('game') == 'rps')
def handle_rps_choice(call):
    chat_id = call.message.chat.id
    data = user_data.get(chat_id, {})
    people_choice = call.data
    if people_choice in ['ü™® –ö–∞–º–µ–Ω—å', '‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã', 'üßª –ë—É–º–∞–≥–∞']:
        game_objects = {'ü™® –ö–∞–º–µ–Ω—å': 1, '‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã': 2, 'üßª –ë—É–º–∞–≥–∞': 3}
        people = game_objects[people_choice]
        comp = random.randint(1, 3)
        result_message = f"üë§ –í—ã –≤—ã–±—Ä–∞–ª–∏ {people_choice}\nü§ñ –ë–æ—Ç –≤—ã–±—Ä–∞–ª {list(game_objects.keys())[comp - 1]}.\n"
        if people == comp:
            result_message += "\n<b>üü∞ –ù–∏—á—å—è!</b>\n"
        elif (people == 1 and comp == 2) or (people == 2 and comp == 3) or (people == 3 and comp == 1):
            data['people_s'] += 1
            result_message += "\n<b>‚úÖ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!</b>\n"
        else:
            data['comp_s'] += 1
            result_message += "\n<b>‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!</b>\n"
        data['rounds'] += 1
        user_data[chat_id] = data
        result_message += f"\nüßÆ –°—á—ë—Ç: {data['people_s']} : {data['comp_s']}"
        if data['people_s'] >= data['victory']:
            result_message += "\n\n<b>ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏–≥—Ä—É!</b>"
            user_data.pop(chat_id)
        elif data['comp_s'] >= data['victory']:
            result_message += "\n\n<b>üò≠ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –∏–≥—Ä—É.</b>"
            user_data.pop(chat_id)
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("ü™® –ö–∞–º–µ–Ω—å", callback_data="ü™® –ö–∞–º–µ–Ω—å"))
            markup.add(types.InlineKeyboardButton("‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã"))
            markup.add(types.InlineKeyboardButton("üßª –ë—É–º–∞–≥–∞", callback_data="üßª –ë—É–º–∞–≥–∞"))
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥: ‚¨áÔ∏è", reply_markup=markup)
        bot.edit_message_text(result_message, call.message.chat.id, call.message.message_id, reply_markup=None,
                              parse_mode='html')


# –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
@bot.message_handler(commands=['guess'])
def guess_game(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É\n\"üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ!\"</b>"
                              "\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:", parse_mode='html')
    user_data[chat_id] = {'game': 'guess', 'state': 'start_number'}


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('game') == 'guess')
def handle_guess_game(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id, {})

    try:
        if data['state'] == 'start_number':
            data['start_number'] = int(message.text)
            data['state'] = 'end_number'
            bot.send_message(chat_id, "‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ:")

        elif data['state'] == 'end_number':
            data['end_number'] = int(message.text)
            data['random_number'] = random.randint(data['start_number'], data['end_number'])
            bot.send_message(chat_id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:")
            data['state'] = 'attempts'

        elif data['state'] == 'attempts':
            data['attempts'] = int(message.text)
            data['current_attempt'] = 0
            bot.send_message(chat_id, "<b>–ù–∞—á–Ω–µ–º –∏–≥—Ä—É!</b>\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:", parse_mode='html')
            data['state'] = 'guessing'

        elif data['state'] == 'guessing':
            guess = int(message.text)
            data['current_attempt'] += 1

            if guess == data['random_number']:
                bot.send_message(chat_id,
                                 f"ü•≥ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {data['random_number']} –∑–∞ \
{data['current_attempt']} –ø–æ–ø—ã—Ç–æ–∫!</b>", parse_mode='html')
                user_data.pop(chat_id)  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞

            elif data['current_attempt'] >= data['attempts']:
                bot.send_message(chat_id,
                                 f"üò≠ <b>–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ {data['random_number']}.</b>",
                                 parse_mode='html')
                user_data.pop(chat_id)  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞

            else:
                if guess < data['random_number']:
                    bot.send_message(chat_id, "üìà <b>–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                                     parse_mode='html')
                else:
                    bot.send_message(chat_id, "üìâ <b>–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                                     parse_mode='html')

    except ValueError:
        bot.send_message(chat_id, "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ‚ùó")


bot.infinity_polling()
